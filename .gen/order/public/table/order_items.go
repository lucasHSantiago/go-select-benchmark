//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrderItems = newOrderItemsTable("public", "order_items", "")

type orderItemsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	OrderID     postgres.ColumnInteger
	ProductName postgres.ColumnString
	Price       postgres.ColumnFloat
	Quantity    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type OrderItemsTable struct {
	orderItemsTable

	EXCLUDED orderItemsTable
}

// AS creates new OrderItemsTable with assigned alias
func (a OrderItemsTable) AS(alias string) *OrderItemsTable {
	return newOrderItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrderItemsTable with assigned schema name
func (a OrderItemsTable) FromSchema(schemaName string) *OrderItemsTable {
	return newOrderItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrderItemsTable with assigned table prefix
func (a OrderItemsTable) WithPrefix(prefix string) *OrderItemsTable {
	return newOrderItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrderItemsTable with assigned table suffix
func (a OrderItemsTable) WithSuffix(suffix string) *OrderItemsTable {
	return newOrderItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrderItemsTable(schemaName, tableName, alias string) *OrderItemsTable {
	return &OrderItemsTable{
		orderItemsTable: newOrderItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newOrderItemsTableImpl("", "excluded", ""),
	}
}

func newOrderItemsTableImpl(schemaName, tableName, alias string) orderItemsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		OrderIDColumn     = postgres.IntegerColumn("order_id")
		ProductNameColumn = postgres.StringColumn("product_name")
		PriceColumn       = postgres.FloatColumn("price")
		QuantityColumn    = postgres.IntegerColumn("quantity")
		allColumns        = postgres.ColumnList{IDColumn, OrderIDColumn, ProductNameColumn, PriceColumn, QuantityColumn}
		mutableColumns    = postgres.ColumnList{OrderIDColumn, ProductNameColumn, PriceColumn, QuantityColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, QuantityColumn}
	)

	return orderItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		OrderID:     OrderIDColumn,
		ProductName: ProductNameColumn,
		Price:       PriceColumn,
		Quantity:    QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
